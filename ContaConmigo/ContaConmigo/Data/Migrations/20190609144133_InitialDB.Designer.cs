// <auto-generated />
using System;
using ContaConmigo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ContaConmigo.Migrations
{
    [DbContext(typeof(ContaContext))]
    [Migration("20190609144133_InitialDB")]
    partial class InitialDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ContaConmigo.Data.Entities.BloodFactor", b =>
                {
                    b.Property<int>("BloodFactorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Blood_Factor");

                    b.HasKey("BloodFactorId");

                    b.ToTable("BloodFactors");
                });

            modelBuilder.Entity("ContaConmigo.Data.Entities.BloodGroup", b =>
                {
                    b.Property<int>("BloodGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Blood_Group");

                    b.HasKey("BloodGroupId");

                    b.ToTable("BloodGroups");
                });

            modelBuilder.Entity("ContaConmigo.Data.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName");

                    b.Property<int?>("ProvinceId1");

                    b.Property<int>("ZipCode");

                    b.HasKey("CityId");

                    b.HasIndex("ProvinceId1");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("ContaConmigo.Data.Entities.Donor", b =>
                {
                    b.Property<int>("DonorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BloodFactorId");

                    b.Property<int?>("BloodGroupId");

                    b.Property<int?>("CityId");

                    b.Property<DateTime>("Last_Date_Blood_Extract");

                    b.Property<string>("Last_Name_Don");

                    b.Property<string>("Name_Don");

                    b.HasKey("DonorId");

                    b.HasIndex("BloodFactorId");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("CityId");

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("ContaConmigo.Data.Entities.Institution", b =>
                {
                    b.Property<int>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId");

                    b.Property<string>("InstitutionAdress");

                    b.Property<string>("InstitutionDescription");

                    b.Property<int>("PhoneNumber");

                    b.HasKey("InstitutionId");

                    b.HasIndex("CityId");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("ContaConmigo.Data.Entities.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProvinceDescription");

                    b.HasKey("ProvinceId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("ContaConmigo.Data.Entities.RequestDonor", b =>
                {
                    b.Property<int>("RequestDonorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountDonor");

                    b.Property<int>("CityId");

                    b.Property<string>("Comments");

                    b.Property<int>("FactorId");

                    b.Property<int>("GroupId");

                    b.Property<int>("InstitutionId");

                    b.Property<DateTime>("Last_Date_Replacement");

                    b.Property<string>("Last_Name_Request_Don");

                    b.Property<string>("Name_Request_Don");

                    b.Property<int>("Phone_Number");

                    b.Property<int>("ZipCode");

                    b.HasKey("RequestDonorId");

                    b.ToTable("RequestDonors");
                });

            modelBuilder.Entity("ContaConmigo.Data.Entities.City", b =>
                {
                    b.HasOne("ContaConmigo.Data.Entities.Province", "ProvinceId")
                        .WithMany()
                        .HasForeignKey("ProvinceId1");
                });

            modelBuilder.Entity("ContaConmigo.Data.Entities.Donor", b =>
                {
                    b.HasOne("ContaConmigo.Data.Entities.BloodFactor", "BloodFactor")
                        .WithMany()
                        .HasForeignKey("BloodFactorId");

                    b.HasOne("ContaConmigo.Data.Entities.BloodGroup", "BloodGroup")
                        .WithMany()
                        .HasForeignKey("BloodGroupId");

                    b.HasOne("ContaConmigo.Data.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("ContaConmigo.Data.Entities.Institution", b =>
                {
                    b.HasOne("ContaConmigo.Data.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");
                });
#pragma warning restore 612, 618
        }
    }
}
